まず、入力できる基本的な「式」(expression)は「数値」です(数値は式の1種です)。
interpreterはそれを「評価」(evaluate)して、結果を出力します。

式である数値と、演算子（+ - *など。これも式です）を組み合わせて、複合式を生成します。

(+ 4 5)
(演算子　被演算子　被演算子　被演算子　被演算子。。。)
被演算子を「引数」とも言います。

pretty print と呼ばれる表記方法を導入します。
(+ (* 3
      (+ (* 2 4)
         (+ 3 5)))
   (+ (- 10 7)
       6))

読めた方がいいです。

define で数値を変数に代入できます。なんか当たり前のこと書いてるように見えますね。

計算式を「木の集積」で示す手法です。

(+ x 3)
という式は、これ単体ではerrorを吐きます。xが定義されていないからです。
正しくは、例えば、

(define x 4)
(+ x 3)
7

です。
+という演算子に関しても同様です。+そのものに意味があるのではなく、
「加算」という手続きが＋という変数に格納されているからこそ、この演算は可能になるわけです。
既に＋に「加算」という手続きが代入されている環境下で算譜するわけです。

1.1.4
• 数値は基本データで、算術演算は基本手続きである。
• 組み合わせをネストすることで、演算を組み合わせることができる。
• 定義は名前と値を関連づけ、抽象化のためにある程度役に立つ。
今ならこの記述の意味が理解できると思います。




